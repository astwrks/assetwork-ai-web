'use client';

import { Report } from '@/types/report.types';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Download, 
  Share2, 
  Eye, 
  BarChart3,
  Table,
  Type,
  Settings
} from 'lucide-react';

interface ReportPreviewProps {
  report: Report;
  selectedSection?: string | null;
}

export default function ReportPreview({ report, selectedSection }: ReportPreviewProps) {
  const getSectionIcon = (type: string) => {
    switch (type) {
      case 'text':
        return Type;
      case 'chart':
        return BarChart3;
      case 'table':
        return Table;
      default:
        return Settings;
    }
  };

  const renderSection = (section: any) => {
    const Icon = getSectionIcon(section.type);
    
    return (
      <div
        key={section.id}
        className={`mb-8 p-6 rounded-lg border ${
          selectedSection === section.id
            ? 'border-blue-300 bg-blue-50 dark:bg-blue-900/20 dark:border-blue-700'
            : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800'
        }`}
      >
        <div className="flex items-center space-x-2 mb-4">
          <Icon className="h-5 w-5 text-gray-600 dark:text-gray-400" />
          <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
            {section.title}
          </h2>
        </div>
        
        <div 
          className="prose dark:prose-invert max-w-none"
          dangerouslySetInnerHTML={{ __html: section.content }}
        />
        
        {section.metadata && (
          <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
              <span>Type: {section.type}</span>
              {section.metadata.chartType && (
                <span>Chart: {section.metadata.chartType}</span>
              )}
              {section.metadata.dataSource && (
                <span>Source: {section.metadata.dataSource}</span>
              )}
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="flex-1 flex flex-col bg-gray-50 dark:bg-gray-900">
      {/* Preview Header */}
      <div className="p-4 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
              {report.title} - Preview
            </h1>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {report.sections.length} sections • Last updated: {report.updatedAt.toLocaleString()}
            </p>
          </div>
          
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm">
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
            <Button variant="outline" size="sm">
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
          </div>
        </div>
      </div>

      {/* Report Content */}
      <div className="flex-1 p-6 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          {/* Report Header */}
          <div className="mb-8 text-center">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2">
              {report.title}
            </h1>
            {report.description && (
              <p className="text-lg text-gray-600 dark:text-gray-400">
                {report.description}
              </p>
            )}
            <div className="mt-4 flex items-center justify-center space-x-6 text-sm text-gray-500 dark:text-gray-400">
              <span>Author: {report.metadata.author}</span>
              <span>Version: {report.metadata.version}</span>
              <span>Created: {report.createdAt.toLocaleDateString()}</span>
            </div>
          </div>

          {/* Report Sections */}
          <div className="space-y-8">
            {report.sections
              .sort((a, b) => a.order - b.order)
              .map(renderSection)}
          </div>

          {/* Report Footer */}
          <div className="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
            <div className="text-center text-sm text-gray-500 dark:text-gray-400">
              <p>Generated by AssetWorks AI Report Builder</p>
              <p className="mt-1">
                Report ID: {report.id} • Generated on {new Date().toLocaleString()}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
