'use client';

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { Report } from '@/types/report.types';
import { ShareSettings } from '@/lib/sharing/shareManager';
import { shareManager } from '@/lib/sharing/shareManager';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Lock, 
  Download, 
  Share2, 
  Eye, 
  Calendar,
  BarChart3,
  FileText,
  AlertCircle
} from 'lucide-react';

export default function SharedReportPage() {
  const params = useParams();
  const shareId = params.shareId as string;
  
  const [shareSettings, setShareSettings] = useState<ShareSettings | null>(null);
  const [report, setReport] = useState<Report | null>(null);
  const [password, setPassword] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadSharedReport();
  }, [shareId]);

  const loadSharedReport = async () => {
    try {
      setIsLoading(true);
      
      // Get share settings
      const settings = await shareManager.getShareSettings(shareId);
      if (!settings) {
        setError('Share link not found');
        return;
      }

      setShareSettings(settings);

      // Check if password is required
      if (settings.password && !isAuthenticated) {
        setIsLoading(false);
        return;
      }

      // Validate access
      const validation = await shareManager.validateShareAccess(shareId, password);
      if (!validation.valid) {
        setError(validation.reason || 'Access denied');
        return;
      }

      // Load report data (mock for now)
      const mockReport: Report = {
        id: settings.reportId,
        title: settings.title,
        description: settings.description,
        sections: [
          {
            id: 'intro',
            type: 'text',
            title: 'Executive Summary',
            content: `
              <h2>Executive Summary</h2>
              <p>This is a comprehensive financial analysis report generated by AssetWorks AI. The report provides detailed insights into market trends, financial performance, and strategic recommendations.</p>
              <p>Key highlights include:</p>
              <ul>
                <li>Revenue growth of 15% year-over-year</li>
                <li>Strong performance in European markets</li>
                <li>Strategic initiatives showing positive ROI</li>
              </ul>
            `,
            aiPrompt: 'Create an executive summary for a financial report',
            editable: false,
            order: 1,
          },
          {
            id: 'analysis',
            type: 'text',
            title: 'Financial Analysis',
            content: `
              <h2>Financial Analysis</h2>
              <p>Our comprehensive analysis reveals several key trends and opportunities:</p>
              <h3>Revenue Analysis</h3>
              <p>Total revenue reached $125M in Q4 2024, representing a 15% increase compared to the previous quarter. This growth was primarily driven by:</p>
              <ul>
                <li>New product launches contributing 40% of growth</li>
                <li>Market expansion in European territories</li>
                <li>Improved customer retention rates</li>
              </ul>
              <h3>Cost Management</h3>
              <p>Operating expenses were well-controlled, with a 8% increase year-over-year, primarily due to strategic investments in technology and talent acquisition.</p>
            `,
            aiPrompt: 'Generate detailed financial analysis',
            editable: false,
            order: 2,
          },
          {
            id: 'charts',
            type: 'chart',
            title: 'Data Visualizations',
            content: `
              <h2>Revenue Trends</h2>
              <div id="revenue-chart" style="height: 400px; background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #6c757d;">
                Interactive Revenue Chart
              </div>
              <p><em>Chart shows quarterly revenue trends over the past 12 months</em></p>
            `,
            aiPrompt: 'Create revenue trend visualization',
            editable: false,
            order: 3,
            metadata: {
              chartType: 'line',
              dataSource: 'financial-data',
            },
          },
        ],
        metadata: {
          author: 'AssetWorks AI',
          version: '1.0',
          tags: ['financial', 'analysis', 'q4-2024'],
        },
        dataSources: [],
        createdAt: new Date('2024-01-01'),
        updatedAt: new Date('2024-01-15'),
        status: 'published',
      };

      setReport(mockReport);
      setIsAuthenticated(true);
      
      // Increment view count
      await shareManager.incrementViewCount(shareId);
      
    } catch (error) {
      console.error('Failed to load shared report:', error);
      setError('Failed to load report');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await loadSharedReport();
  };

  const handleDownload = () => {
    // TODO: Implement download functionality
    console.log('Download report');
  };

  const getSectionIcon = (type: string) => {
    switch (type) {
      case 'text':
        return FileText;
      case 'chart':
        return BarChart3;
      default:
        return FileText;
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Loading report...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
        <div className="text-center">
          <AlertCircle className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
            {error}
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            The report you're looking for could not be found or is no longer available.
          </p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated && shareSettings?.password) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <Lock className="h-12 w-12 text-blue-600 mx-auto mb-4" />
            <CardTitle>Password Required</CardTitle>
            <p className="text-gray-600 dark:text-gray-400">
              This report is password protected. Please enter the password to continue.
            </p>
          </CardHeader>
          <CardContent>
            <form onSubmit={handlePasswordSubmit} className="space-y-4">
              <Input
                type="password"
                placeholder="Enter password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <Button type="submit" className="w-full">
                Access Report
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!report) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
        <div className="text-center">
          <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
            Report Not Found
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            The requested report could not be loaded.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                {report.title}
              </h1>
              {report.description && (
                <p className="text-gray-600 dark:text-gray-400 mt-1">
                  {report.description}
                </p>
              )}
              <div className="flex items-center space-x-4 mt-2 text-sm text-gray-500 dark:text-gray-400">
                <span>Author: {report.metadata.author}</span>
                <span>•</span>
                <span>Created: {report.createdAt.toLocaleDateString()}</span>
                {shareSettings?.viewCount && (
                  <>
                    <span>•</span>
                    <span>{shareSettings.viewCount} views</span>
                  </>
                )}
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              {shareSettings?.allowDownload && (
                <Button variant="outline" onClick={handleDownload}>
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
              )}
              <Button variant="outline">
                <Share2 className="h-4 w-4 mr-2" />
                Share
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Report Content */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="space-y-8">
          {report.sections
            .sort((a, b) => a.order - b.order)
            .map((section) => {
              const Icon = getSectionIcon(section.type);
              
              return (
                <Card key={section.id}>
                  <CardHeader>
                    <div className="flex items-center space-x-2">
                      <Icon className="h-5 w-5 text-blue-600" />
                      <CardTitle>{section.title}</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div 
                      className="prose dark:prose-invert max-w-none"
                      dangerouslySetInnerHTML={{ __html: section.content }}
                    />
                  </CardContent>
                </Card>
              );
            })}
        </div>

        {/* Footer */}
        <div className="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
          <div className="text-center text-sm text-gray-500 dark:text-gray-400">
            <p>Generated by AssetWorks AI Report Builder</p>
            <p className="mt-1">
              Report ID: {report.id} • Shared on {new Date().toLocaleString()}
            </p>
            {shareSettings?.expiresAt && (
              <p className="mt-1">
                <Calendar className="h-4 w-4 inline mr-1" />
                Expires: {new Date(shareSettings.expiresAt).toLocaleString()}
              </p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
