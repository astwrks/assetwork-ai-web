generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["darwin-arm64", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model api_keys {
  id           String      @id
  userId       String
  provider     ApiProvider
  keyName      String      @db.VarChar(100)
  encryptedKey String
  isActive     Boolean     @default(true)
  lastUsedAt   DateTime?
  usageCount   Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  users        users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, keyName])
  @@index([isActive])
  @@index([userId, provider])
}

model entities {
  id              String            @id
  name            String
  slug            String            @unique
  type            EntityType
  ticker          String?
  isin            String?
  cik             String?
  lei             String?
  description     String?
  logo            String?
  website         String?
  industry        String?
  sector          String?
  headquarters    String?
  masterMarkdown  String?
  summary         String?
  trendingTopics  Json?             @default("[]")
  mentionCount    Int               @default(0)
  lastMentioned   DateTime?
  firstMentioned  DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  entity_insights entity_insights[]
  entity_mentions entity_mentions[]
  entity_tags     entity_tags[]

  @@index([slug])
  @@index([ticker])
  @@index([type, mentionCount(sort: Desc)])
}

model entity_insights {
  id              String      @id
  entityId        String
  type            InsightType
  title           String      @db.VarChar(300)
  content         String
  sourceReportIds String[]    @default([])
  confidence      Float?
  timeframe       String?
  category        String?
  model           String?     @db.VarChar(100)
  prompt          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime
  entities        entities    @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@index([entityId, createdAt(sort: Desc)])
  @@index([type])
}

model entity_mentions {
  id              String           @id
  entityId        String
  reportId        String
  context         String?
  sentiment       Float?
  relevance       Float?
  sectionId       String?
  sectionType     SectionType?
  metadata        Json?            @default("{}")
  createdAt       DateTime         @default(now())
  entities        entities         @relation(fields: [entityId], references: [id], onDelete: Cascade)
  reports         reports          @relation(fields: [reportId], references: [id], onDelete: Cascade)
  report_sections report_sections? @relation(fields: [sectionId], references: [id])

  @@unique([entityId, reportId])
  @@index([entityId, createdAt(sort: Desc)])
  @@index([reportId])
}

model entity_tags {
  id        String   @id
  entityId  String
  tag       String
  createdAt DateTime @default(now())
  entities  entities @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([entityId, tag])
  @@index([tag])
}

model messages {
  id        String      @id
  threadId  String
  userId    String
  role      MessageRole
  content   String
  reportId  String?
  metadata  Json?       @default("{}")
  createdAt DateTime    @default(now())
  updatedAt DateTime
  threads   threads     @relation(fields: [threadId], references: [id], onDelete: Cascade)
  users     users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([threadId, createdAt])
  @@index([userId])
}

model playground_settings {
  id              String   @id
  userId          String   @unique
  defaultModel    String?  @db.VarChar(100)
  defaultProvider String?  @db.VarChar(50)
  autoSave        Boolean  @default(true)
  settings        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  users           users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model queries {
  id         String   @id
  userId     String
  query      String
  response   String
  provider   String?
  model      String?
  tokensUsed Int?
  cost       Float?
  metadata   Json?    @default("{}")
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
}

model report_sections {
  id              String            @id
  reportId        String
  type            SectionType
  title           String            @db.VarChar(300)
  htmlContent     String
  order           Int
  version         Int               @default(1)
  editHistory     Json[]            @default([])
  metadata        Json?             @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  entity_mentions entity_mentions[]
  reports         reports           @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId, order])
}

model reports {
  id              String            @id
  userId          String
  threadId        String?
  title           String            @db.VarChar(300)
  description     String?
  htmlContent     String
  version         Int               @default(1)
  status          ReportStatus      @default(DRAFT)
  metadata        Json?             @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  entity_mentions entity_mentions[]
  report_sections report_sections[]
  users           users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([threadId])
  @@index([userId, createdAt(sort: Desc)])
}

model playground_reports {
  id                String   @id
  threadId          String
  version           Int      @default(1)
  parentReportId    String?  // For version control
  htmlContent       String   // Full HTML content
  sections          Json[]   @default([]) // Embedded sections
  sectionRefs       String[] @default([]) // References to report_sections
  insights          Json[]   @default([]) // Insights array
  isInteractiveMode Boolean  @default(false)

  // Metadata
  metadata          Json?    @default("{}")
  generatedBy       String?
  model             String?
  provider          String?
  prompt            String?
  dataSources       String[] @default([])
  generationTime    Int?     // milliseconds

  // Usage tracking
  totalTokens       Int      @default(0)
  totalCost         Float    @default(0)
  operations        Json[]   @default([]) // Array of usage operations

  // Public sharing
  shareId           String?  @unique
  isShareActive     Boolean  @default(false)
  shareCreatedAt    DateTime?
  shareCreatedBy    String?
  shareExpiresAt    DateTime?

  // Publishing
  pdfUrl            String?
  isPublished       Boolean  @default(false)
  publishedAt       DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime
  threads           threads  @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, version(sort: Desc)])
  @@index([threadId, createdAt(sort: Desc)])
  @@index([parentReportId])
  @@index([shareId])
}

model context_snapshots {
  id                      String   @id
  entityType              EntitySnapshotType
  entityId                String
  slug                    String   @unique

  // Content
  markdownContent         String
  summary                 String   @default("")

  // Versioning
  version                 Int      @default(1)
  lastUpdated             DateTime @default(now())

  // Statistics
  wordCount               Int      @default(0)
  characterCount          Int      @default(0)
  messageCount            Int?
  reportCount             Int?
  sectionCount            Int?
  totalTokens             Int?

  // Visibility
  visibility              SnapshotVisibility @default(PRIVATE)
  isPublic                Boolean  @default(false)
  userId                  String
  sharedWith              String[] @default([])

  // SEO Metadata
  seoTitle                String
  seoDescription          String
  seoKeywords             String[] @default([])
  ogImage                 String?

  // Update tracking
  lastContentUpdate       DateTime @default(now())
  lastSnapshotGeneration  DateTime @default(now())
  updateTrigger           String   @default("initial_creation")

  createdAt               DateTime @default(now())
  updatedAt               DateTime

  @@unique([entityType, entityId])
  @@index([userId, isPublic])
  @@index([slug, isPublic])
  @@index([entityType, entityId])
  @@index([visibility])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model templates {
  id              String       @id
  userId          String
  name            String       @db.VarChar(200)
  description     String?      @db.VarChar(1000)
  category        String?
  tags            String[]     @default([])
  structure       Json
  basePrompt      String?
  isPublic        Boolean      @default(false)
  usageCount      Int          @default(0)
  sourceThreadId  String?
  previewImageUrl String?
  isPremium       Boolean      @default(false)
  tier            TemplateTier @default(FREE)
  rating          Float        @default(0)
  ratingCount     Int          @default(0)
  icon            String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  users           users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isPremium, isPublic])
  @@index([isPublic, category])
  @@index([isPublic, tier, rating(sort: Desc)])
  @@index([isPublic, usageCount(sort: Desc)])
  @@index([tags])
  @@index([userId, createdAt(sort: Desc)])
}

model threads {
  id                  String               @id
  userId              String
  title               String               @db.VarChar(200)
  description         String?              @db.VarChar(1000)
  status              ThreadStatus         @default(ACTIVE)
  currentReportId     String?
  reportVersions      String[]             @default([])
  sharedWith          Json[]               @default([])
  isTemplate          Boolean              @default(false)
  templateName        String?              @db.VarChar(200)
  templateDescription String?              @db.VarChar(1000)
  metadata            Json?                @default("{}")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime
  messages            messages[]
  playground_reports  playground_reports[]
  users               users                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isTemplate])
  @@index([status])
  @@index([userId, isTemplate])
  @@index([userId, status, createdAt(sort: Desc)])
}

model users {
  id                   String               @id
  email                String               @unique
  password             String?
  name                 String?
  avatar               String?
  image                String?
  bio                  String?              @db.VarChar(500)
  aiCredits            Int                  @default(100)
  credits              Int                  @default(100)
  plan                 UserPlan             @default(FREE)
  googleId             String?              @unique
  isPublic             Boolean              @default(true)
  theme                Theme                @default(SYSTEM)
  notificationSettings Json                 @default("{\"push\": true, \"email\": true, \"updates\": true}")
  preferences          Json?                @default("{\"theme\": \"system\", \"language\": \"en\", \"timezone\": \"UTC\", \"notifications\": {\"push\": true, \"email\": true, \"marketing\": false}}")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  emailVerified        DateTime?
  accounts             accounts[]
  api_keys             api_keys[]
  messages             messages[]
  playground_settings  playground_settings?
  queries              queries[]
  reports              reports[]
  sessions             sessions[]
  templates            templates[]
  threads              threads[]
  widgets              widgets[]
  users_A              users[]              @relation("UserFollows")
  users_B              users[]              @relation("UserFollows")

  @@index([createdAt])
  @@index([email])
  @@index([plan])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model widgets {
  id        String   @id
  userId    String
  type      String   @db.VarChar(50)
  title     String   @db.VarChar(200)
  config    Json     @default("{}")
  position  Json     @default("{\"h\": 3, \"w\": 4, \"x\": 0, \"y\": 0}")
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum ApiProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
  COINGECKO
  ALPHA_VANTAGE
}

enum EntityType {
  COMPANY
  STOCK
  PERSON
  PRODUCT
  SECTOR
  CRYPTOCURRENCY
  COMMODITY
  INDEX
  ETF
  MUTUAL_FUND
  COUNTRY
  CURRENCY
}

enum InsightType {
  TREND
  COMPARISON
  PREDICTION
  SUMMARY
  RISK
  OPPORTUNITY
  METRIC
  NEWS
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SectionType {
  METRIC
  CHART
  TABLE
  TEXT
  INSIGHT
  CUSTOM
  IMAGE
}

enum TemplateTier {
  FREE
  PRO
  ENTERPRISE
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum ThreadStatus {
  ACTIVE
  ARCHIVED
}

enum UserPlan {
  FREE
  PRO
  ENTERPRISE
}

enum EntitySnapshotType {
  THREAD
  REPORT
}

enum SnapshotVisibility {
  PRIVATE
  SHARED
  PUBLIC
  ORGANIZATION
}
