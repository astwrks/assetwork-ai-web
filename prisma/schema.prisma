generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model api_keys {
  id           String      @id
  userId       String
  provider     ApiProvider
  keyName      String      @db.VarChar(100)
  encryptedKey String
  isActive     Boolean     @default(true)
  lastUsedAt   DateTime?
  usageCount   Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  users        users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, keyName])
  @@index([isActive])
  @@index([userId, provider])
}

model messages {
  id        String      @id
  threadId  String
  userId    String
  role      MessageRole
  content   String
  reportId  String?
  metadata  Json?       @default("{}")
  createdAt DateTime    @default(now())
  updatedAt DateTime
  threads   threads     @relation(fields: [threadId], references: [id], onDelete: Cascade)
  users     users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([threadId, createdAt])
  @@index([userId])
}

model playground_settings {
  id              String   @id
  userId          String   @unique
  defaultModel    String?  @db.VarChar(100)
  defaultProvider String?  @db.VarChar(50)
  autoSave        Boolean  @default(true)
  settings        Json     @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  users           users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model queries {
  id         String   @id
  userId     String
  query      String
  response   String
  provider   String?
  model      String?
  tokensUsed Int?
  cost       Float?
  metadata   Json?    @default("{}")
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
}

model report_sections {
  id          String      @id
  reportId    String
  type        SectionType
  title       String      @db.VarChar(300)
  htmlContent String
  order       Int
  version     Int         @default(1)
  editHistory Json[]      @default([])
  metadata    Json?       @default("{}")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  reports     reports     @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId, order])
}

model reports {
  id              String            @id
  userId          String
  threadId        String?
  title           String            @db.VarChar(300)
  description     String?
  htmlContent     String
  version         Int               @default(1)
  status          ReportStatus      @default(DRAFT)
  metadata        Json?             @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  report_sections report_sections[]
  users           users             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([threadId])
  @@index([userId, createdAt(sort: Desc)])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model templates {
  id              String       @id
  userId          String
  name            String       @db.VarChar(200)
  description     String?      @db.VarChar(1000)
  category        String?
  tags            String[]     @default([])
  structure       Json
  basePrompt      String?
  isPublic        Boolean      @default(false)
  usageCount      Int          @default(0)
  sourceThreadId  String?
  previewImageUrl String?
  isPremium       Boolean      @default(false)
  tier            TemplateTier @default(FREE)
  rating          Float        @default(0)
  ratingCount     Int          @default(0)
  icon            String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  users           users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isPremium, isPublic])
  @@index([isPublic, category])
  @@index([isPublic, tier, rating(sort: Desc)])
  @@index([isPublic, usageCount(sort: Desc)])
  @@index([tags])
  @@index([userId, createdAt(sort: Desc)])
}

model threads {
  id                  String       @id
  userId              String
  title               String       @db.VarChar(200)
  description         String?      @db.VarChar(1000)
  status              ThreadStatus @default(ACTIVE)
  currentReportId     String?
  reportVersions      String[]     @default([])
  sharedWith          Json[]       @default([])
  isTemplate          Boolean      @default(false)
  templateName        String?      @db.VarChar(200)
  templateDescription String?      @db.VarChar(1000)
  metadata            Json?        @default("{}")
  createdAt           DateTime     @default(now())
  updatedAt           DateTime
  messages            messages[]
  users               users        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isTemplate])
  @@index([status])
  @@index([userId, isTemplate])
  @@index([userId, status, createdAt(sort: Desc)])
}

model users {
  id                   String               @id
  email                String               @unique
  password             String?
  name                 String?
  avatar               String?
  image                String?
  bio                  String?              @db.VarChar(500)
  aiCredits            Int                  @default(100)
  credits              Int                  @default(100)
  plan                 UserPlan             @default(FREE)
  googleId             String?              @unique
  isPublic             Boolean              @default(true)
  theme                Theme                @default(SYSTEM)
  notificationSettings Json                 @default("{\"push\": true, \"email\": true, \"updates\": true}")
  preferences          Json?                @default("{\"theme\": \"system\", \"language\": \"en\", \"timezone\": \"UTC\", \"notifications\": {\"push\": true, \"email\": true, \"marketing\": false}}")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  emailVerified        DateTime?
  accounts             accounts[]
  api_keys             api_keys[]
  messages             messages[]
  playground_settings  playground_settings?
  queries              queries[]
  reports              reports[]
  sessions             sessions[]
  templates            templates[]
  threads              threads[]
  widgets              widgets[]
  users_A              users[]              @relation("UserFollows")
  users_B              users[]              @relation("UserFollows")

  @@index([createdAt])
  @@index([email])
  @@index([plan])
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model widgets {
  id        String   @id
  userId    String
  type      String   @db.VarChar(50)
  title     String   @db.VarChar(200)
  config    Json     @default("{}")
  position  Json     @default("{\"h\": 3, \"w\": 4, \"x\": 0, \"y\": 0}")
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum ApiProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
  COINGECKO
  ALPHA_VANTAGE
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SectionType {
  METRIC
  CHART
  TABLE
  TEXT
  INSIGHT
  CUSTOM
  IMAGE
}

enum TemplateTier {
  FREE
  PRO
  ENTERPRISE
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum ThreadStatus {
  ACTIVE
  ARCHIVED
}

enum UserPlan {
  FREE
  PRO
  ENTERPRISE
}
